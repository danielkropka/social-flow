datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum PlanStatus {
    INCOMPLETE
    INCOMPLETE_EXPIRED
    TRIALING
    ACTIVE
    PAST_DUE
    CANCELED
    UNPAID
    PAUSED
}

enum PlanType {
    FREE
    BASIC
    CREATOR
}

enum PlanInterval {
    MONTH
    YEAR
}

enum MediaType {
    IMAGE
    VIDEO
}

enum Provider {
    FACEBOOK
    INSTAGRAM
    TWITTER
    TIKTOK
    GOOGLE
}

model Account {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    userId            String   @db.ObjectId
    type              String
    provider          Provider
    providerAccountId String
    refresh_token     String?  @db.String
    access_token      String?  @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    password          String?
    image             String?
    connectedAccounts ConnectedAccount[]
    accounts          Account[]
    sessions          Session[]
    gotFreeTrial      Boolean            @default(false)

    stripeCustomerId     String?       @unique
    stripeSubscriptionId String?       @unique
    subscriptionStatus   PlanStatus?
    subscriptionType     PlanType?
    subscriptionInterval PlanInterval?
    subscriptionStart    DateTime?
    subscriptionEnd      DateTime?

    posts Post[]
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Media {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    url          String
    type         MediaType
    thumbnailUrl String?
    postId       String    @db.ObjectId
    post         Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt

    @@index([postId])
    @@index([type])
}

model Post {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    content     String
    published   Boolean   @default(false)
    publishedAt DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    // Relacje
    userId                String                 @db.ObjectId
    user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    media                 Media[]
    postConnectedAccounts PostConnectedAccount[]

    @@index([userId])
    @@index([published])
    @@index([publishedAt])
}

model ConnectedAccount {
    id                String    @id @default(auto()) @map("_id") @db.ObjectId
    provider          Provider
    providerAccountId String
    accessToken       String
    refreshToken      String?
    expiresAt         DateTime?
    name              String
    username          String
    profileImage      String?

    // Relacje
    userId                String                 @db.ObjectId
    user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    postConnectedAccounts PostConnectedAccount[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model PostConnectedAccount {
    id                 String           @id @default(auto()) @map("_id") @db.ObjectId
    postId             String           @db.ObjectId
    connectedAccountId String           @db.ObjectId
    post               Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
    connectedAccount   ConnectedAccount @relation(fields: [connectedAccountId], references: [id], onDelete: Cascade)

    @@unique([postId, connectedAccountId])
    @@index([postId])
    @@index([connectedAccountId])
}
